<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.framework.evo.sys.dao.UserDao">

	<resultMap id="UserResultMap" type="User">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="password" property="password"/>
		<result column="name" property="name"/>
		<result column="code" property="code"/>
		<result column="email" property="email"/>
		<result column="mobile_number" property="mobileNumber"/>
		<result column="freeze" property="freeze"/>
		<result column="login_time" property="loginTime"/>
		<result column="login_ip" property="loginIp"/>
		<result column="last_login_time" property="lastLoginTime"/>
		<result column="last_login_ip" property="lastLoginIp"/>
		<result column="create_by" property="createBy"/>
		<result column="create_time" property="createTime"/>
		<result column="update_by" property="updateBy"/>
		<result column="update_time" property="updateTime"/>
	</resultMap>

	<sql id="columns">
		t.id, t.username, t.password, t.name, t.code, t.email, t.mobile_number, t.freeze, t.login_time, t.login_ip, t.last_login_time, t.last_login_ip,
		t.create_by, t.create_time, t.update_by, t.update_time
	</sql>

	<sql id="condition">
		<where>
			<if test="id != null and id != ''">
				AND t.id = #{id}
			</if>
			<if test="username != null and username != ''">
				AND t.username = #{username}
			</if>
			<if test="name != null and name != ''">
				AND t.name = #{name}
			</if>
			<if test="code != null and code != ''">
				AND t.code = #{code}
			</if>
			<if test="email != null and email != ''">
				AND t.email = #{email}
			</if>
			<if test="mobileNumber != null and mobileNumber != ''">
				AND t.mobile_number = #{mobileNumber}
			</if>
			<if test="freeze != null and freeze != ''">
				AND t.freeze = #{freeze}
			</if>
			<if test="loginTime != null and loginTime != ''">
				AND t.login_time = #{loginTime}
			</if>
			<if test="loginIp != null and loginIp != ''">
				AND t.login_ip = #{loginIp}
			</if>
			<if test="lastLoginTime != null and lastLoginTime != ''">
				AND t.last_login_time = #{lastLoginTime}
			</if>
			<if test="lastLoginIp != null and lastLoginIp != ''">
				AND t.last_login_ip = #{lastLoginIp}
			</if>
		</where>
	</sql>

	<sql id="conditionLike">
		<where>
			<if test="username != null and username != ''">
				AND t.username like '%${username}%'
			</if>
			<if test="name != null and name != ''">
				AND t.name like '%${name}%'
			</if>
			<if test="code != null and code != ''">
				AND t.code like '%${code}%'
			</if>
			<if test="email != null and email != ''">
				AND t.email like '%${email}%'
			</if>
			<if test="mobileNumber != null and mobileNumber != ''">
				AND t.mobile_number like '%${mobileNumber}%'
			</if>
			<if test="freeze != null and freeze != ''">
				AND t.freeze = #{freeze}
			</if>
			<if test="loginTime != null and loginTime != ''">
				AND t.login_time = #{loginTime}
			</if>
			<if test="loginIp != null and loginIp != ''">
				AND t.login_ip = #{loginIp}
			</if>
			<if test="lastLoginTime != null and lastLoginTime != ''">
				AND t.last_login_time = #{lastLoginTime}
			</if>
			<if test="lastLoginIp != null and lastLoginIp != ''">
				AND t.last_login_ip = #{lastLoginIp}
			</if>
		</where>
	</sql>

	<sql id="select">
		SELECT <include refid="columns"/> FROM sys_user t
	</sql>

	<select id="get" resultMap="UserResultMap">
		<include refid="select"/>
		WHERE t.id = #{value}
	</select>

	<select id="find" resultMap="UserResultMap">
		<include refid="select"/>
		<include refid="condition"/>
		<if test="pageSort != null">
			ORDER BY ${pageSort} <if test="pageOrder != null">${pageOrder}</if>
		</if>
	</select>

	<select id="findLike" resultMap="UserResultMap">
		<include refid="select"/>
		<include refid="conditionLike"/>
		<if test="pageSort != null">
			ORDER BY ${pageSort} <if test="pageOrder != null">${pageOrder}</if>
		</if>
	</select>

	<select id="count" resultType="int">
		SELECT count(1) count FROM sys_user t
		<include refid="condition"/>
	</select>

	<select id="countLike" resultType="int">
		SELECT count(1) count FROM sys_user t
		<include refid="conditionLike"/>
	</select>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO sys_user (
			username, password, name, code, email, mobile_number, freeze, login_time, login_ip, last_login_time, last_login_ip, create_by, create_time, update_by, update_time
		) VALUES (
			#{username}, #{password}, #{name}, #{code}, #{email}, #{mobileNumber}, #{freeze}, #{loginTime}, #{loginIp}, #{lastLoginTime}, #{lastLoginIp}, #{createBy}, #{createTime}, #{updateBy}, #{updateTime}
		)
	</insert>

	<insert id="insertWithRole" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO sys_user_role (
			user_id, role_id
		) VALUES
		<foreach collection="roleIds" separator="," item="roleId">
			(#{id}, #{roleId})
		</foreach>
	</insert>

	<update id="update">
		UPDATE sys_user SET
			username = #{username},
			password = #{password},
			name = #{name},
			code = #{code},
			email = #{email},
			mobile_number = #{mobileNumber},
			freeze = #{freeze},
			login_time = #{loginTime},
			login_ip = #{loginIp},
			last_login_time = #{lastLoginTime},
			last_login_ip = #{lastLoginIp},
			update_by = #{updateBy},
			update_time = #{updateTime}
		WHERE
			id = #{id}
	</update>

	<delete id="delete">
		DELETE FROM sys_user WHERE id = #{value}
	</delete>

	<delete id="deleteWithRole">
		DELETE FROM sys_user_role WHERE user_id = #{value}
	</delete>

	<delete id="deleteByRole">
		DELETE FROM sys_user_role WHERE role_id = #{value}
	</delete>

</mapper>
